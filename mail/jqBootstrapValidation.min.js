!function($) {
    var helpBlocks = [];
    
    var options = {
        prependExistingHelpBlock: false,
        sniffHtml: true,
        preventSubmit: true,
        submitError: false,
        submitSuccess: false,
        semanticallyStrict: false,
        autoAdd: {
            helpBlocks: true
        },
        filter: function() {
            return true;
        }
    };
    
    var methods = {
        init: function(userOptions) {
            var settings = $.extend(true, {}, options);
            settings = $.extend(true, settings, userOptions);
            
            var uniqueForms = $.unique(this.map(function() {
                return $(this).parents("form")[0];
            }).toArray());
            
            $(uniqueForms).on("submit", function(event) {
                var $form = $(this);
                var errorCount = 0;
                
                var $inputs = $form.find("input,textarea,select").not("[type=submit],[type=image]").filter(settings.filter);
                $inputs.trigger("submit.validation").trigger("validationLostFocus.validation");
                
                $inputs.each(function() {
                    var $input = $(this);
                    var $controlGroup = $input.parents(".control-group").first();
                    
                    if ($controlGroup.hasClass("warning")) {
                        $controlGroup.removeClass("warning").addClass("error");
                        errorCount++;
                    }
                });
                
                $inputs.trigger("validationLostFocus.validation");
                
                if (errorCount > 0) {
                    if (settings.preventSubmit) {
                        event.preventDefault();
                    }
                    $form.addClass("error");
                    if ($.isFunction(settings.submitError)) {
                        settings.submitError($form, event, $inputs.jqBootstrapValidation("collectErrors", true));
                    }
                } else {
                    $form.removeClass("error");
                    if ($.isFunction(settings.submitSuccess)) {
                        settings.submitSuccess($form, event);
                    }
                }
            });
            
            this.each(function() {
                var $input = $(this);
                var $controlGroup = $input.parents(".control-group").first();
                var $form = $input.parents("form").first();
                var validators = [];
                
                if (!settings.sniffHtml) {
                    return;
                }
                
                var message;
                var validationPatternMessage;
                var validationPatternRegex;
                var validationMaxMessage;
                var validationMaxMax;
                var validationMinMessage;
                var validationMinMin;
                var validationMaxlengthMessage;
                var validationMaxlengthMaxlength;
                var validationMinlengthMessage;
                var validationMinlengthMinlength;
                var validationRequiredMessage;
                var validationNumberMessage;
                var validationValidemailMessage;
                var validationEmailMessage;
                var validationMincheckedMessage;
                var validationMincheckedMinchecked;
                var validationMaxcheckedMessage;
                var validationMaxcheckedMaxchecked;
                
                if ($input.attr("pattern") !== undefined) {
                    validationPatternMessage = "Not in the expected format <!-- data-validation-pattern-message to override -->";
                    if ($input.data("validationPatternMessage")) {
                        validationPatternMessage = $input.data("validationPatternMessage");
                    }
                    $input.data("validationPatternMessage", validationPatternMessage);
                    validationPatternRegex = $input.attr("pattern");
                    $input.data("validationPatternRegex", validationPatternRegex);
                }
                
                if ($input.attr("max") !== undefined || $input.attr("aria-valuemax") !== undefined) {
                    var max = $input.attr("max") !== undefined ? $input.attr("max") : $input.attr("aria-valuemax");
                    validationMaxMessage = "Too high: Maximum of '" + max + "' <!-- data-validation-max-message to override -->";
                    if ($input.data("validationMaxMessage")) {
                        validationMaxMessage = $input.data("validationMaxMessage");
                    }
                    $input.data("validationMaxMessage", validationMaxMessage);
                    $input.data("validationMaxMax", max);
                }
                
                if ($input.attr("min") !== undefined || $input.attr("aria-valuemin") !== undefined) {
                    var min = $input.attr("min") !== undefined ? $input.attr("min") : $input.attr("aria-valuemin");
                    validationMinMessage = "Too low: Minimum of '" + min + "' <!-- data-validation-min-message to override -->";
                    if ($input.data("validationMinMessage")) {
                        validationMinMessage = $input.data("validationMinMessage");
                    }
                    $input.data("validationMinMessage", validationMinMessage);
                    $input.data("validationMinMin", min);
                }
                
                if ($input.attr("maxlength") !== undefined) {
                    validationMaxlengthMessage = "Too long: Maximum of '" + $input.attr("maxlength") + "' characters <!-- data-validation-maxlength-message to override -->";
                    if ($input.data("validationMaxlengthMessage")) {
                        validationMaxlengthMessage = $input.data("validationMaxlengthMessage");
                    }
                    $input.data("validationMaxlengthMessage", validationMaxlengthMessage);
                    $input.data("validationMaxlengthMaxlength", $input.attr("maxlength"));
                }
                
                if ($input.attr("minlength") !== undefined) {
                    validationMinlengthMessage = "Too short: Minimum of '" + $input.attr("minlength") + "' characters <!-- data-validation-minlength-message to override -->";
                    if ($input.data("validationMinlengthMessage")) {
                        validationMinlengthMessage = $input.data("validationMinlengthMessage");
                    }
                    $input.data("validationMinlengthMessage", validationMinlengthMessage);
                    $input.data("validationMinlengthMinlength", $input.attr("minlength"));
                }
                
                if ($input.attr("required") !== undefined || $input.attr("aria-required") !== undefined) {
                    validationRequiredMessage = "This is required <!-- data-validator-required-message to override -->";
                    if ($input.data("validationRequiredMessage")) {
                        validationRequiredMessage = $input.data("validationRequiredMessage");
                    }
                    $input.data("validationRequiredMessage", validationRequiredMessage);
                }
                
                if ($input.attr("type") !== undefined && $input.attr("type").toLowerCase() === "number") {
                    validationNumberMessage = "Must be a number <!-- data-validator-number-message to override -->";
                    if ($input.data("validationNumberMessage")) {
                        validationNumberMessage = $input.data("validationNumberMessage");
                    }
                    $input.data("validationNumberMessage", validationNumberMessage);
                }
                
                if ($input.attr("type") !== undefined && $input.attr("type").toLowerCase() === "email") {
                    validationValidemailMessage = "Not a valid email address <!-- data-validator-validemail-message to override -->";
                    if ($input.data("validationValidemailMessage")) {
                        validationValidemailMessage = $input.data("validationValidemailMessage");
                    } else if ($input.data("validationEmailMessage")) {
                        validationValidemailMessage = $input.data("validationEmailMessage");
                    }
                    $input.data("validationValidemailMessage", validationValidemailMessage);
                }
                
                if ($input.attr("minchecked") !== undefined) {
                    validationMincheckedMessage = "Not enough options checked; Minimum of '" + $input.attr("minchecked") + "' required <!-- data-validation-minchecked-message to override -->";
                    if ($input.data("validationMincheckedMessage")) {
                        validationMincheckedMessage = $

input.data("validationMincheckedMessage");
                    }
                    $input.data("validationMincheckedMessage", validationMincheckedMessage);
                    $input.data("validationMincheckedMinchecked", $input.attr("minchecked"));
                }
                
                if ($input.attr("maxchecked") !== undefined) {
                    validationMaxcheckedMessage = "Too many options checked; Maximum of '" + $input.attr("maxchecked") + "' required <!-- data-validation-maxchecked-message to override -->";
                    if ($input.data("validationMaxcheckedMessage")) {
                        validationMaxcheckedMessage = $input.data("validationMaxcheckedMessage");
                    }
                    $input.data("validationMaxcheckedMessage", validationMaxcheckedMessage);
                    $input.data("validationMaxcheckedMaxchecked", $input.attr("maxchecked"));
                }
                
                if ($input.data("validation") !== undefined) {
                    validators = $input.data("validation").split(",");
                }
                
                $.each($input.data(), function(key, value) {
                    var keyParts = key.replace(/([A-Z])/g, ",$1").split(",");
                    if (keyParts[0] === "validation" && keyParts[1]) {
                        validators.push(keyParts[1]);
                    }
                });
                
                var tempValidators = [];
                var newValidators = [];
                do {
                    $.each(validators, function(index, validatorName) {
                        validators[index] = capitalizeFirstLetter(validatorName);
                    });
                    validators = $.unique(validators);
                    newValidators = [];
                    $.each(tempValidators, function(index, validatorName) {
                        if ($input.data("validation" + validatorName + "Shortcut")) {
                            $.each($input.data("validation" + validatorName + "Shortcut").split(","), function(index, shortcut) {
                                newValidators.push(shortcut);
                            });
                        } else if (settings.builtInValidators[validatorName.toLowerCase()]) {
                            var validator = settings.builtInValidators[validatorName.toLowerCase()];
                            if (validator.type.toLowerCase() === "shortcut") {
                                newValidators.push(validatorName);
                            } else {
                                $.each(settings.validatorTypes, function(type, validatorType) {
                                    if (!$.isFunction(validatorType.init)) {
                                        return true;
                                    }
                                    if (type.toLowerCase() === validator.type.toLowerCase()) {
                                        if (!$input.data("validation" + validatorName + capitalizeFirstLetter(validatorType.name))) {
                                            $input.data("validation" + validatorName + capitalizeFirstLetter(validatorType.name), validator[validatorType.name.toLowerCase()]);
                                        }
                                        newValidators.push(validatorType.name);
                                        return false;
                                    }
                                });
                            }
                        }
                    });
                    tempValidators = $.unique(newValidators);
                } while (tempValidators.length > 0);
                
                var validationData = {};
                $.each(validators, function(index, validatorName) {
                    var message = "";
                    var validator = {};
                    var isInvalid = false;
                    if ($input.data("validation" + validatorName + "Message")) {
                        message = $input.data("validation" + validatorName + "Message");
                    } else {
                        message = "'" + validatorName + "' validation failed <!-- Add attribute 'data-validation-" + validatorName.toLowerCase() + "-message' to input to change this message -->";
                    }
                    $.each(settings.validatorTypes, function(type, validatorType) {
                        if (!$.isFunction(validationData[type])) {
                            validationData[type] = [];
                        }
                        if (isInvalid || !$input.data("validation" + validatorName + capitalizeFirstLetter(validatorType.name))) {
                            return true;
                        }
                        if (type.toLowerCase() === validatorType.type.toLowerCase()) {
                            validator = $.extend({}, validator, validatorType.init($input, validatorName));
                            if (!$.isFunction(validatorType.validate)) {
                                return true;
                            }
                            isInvalid = !validatorType.validate($input, n($input), validator);
                            if (isInvalid) {
                                if (validator.message) {
                                    message = validator.message;
                                }
                                return false;
                            }
                            return true;
                        }
                    });
                    if (!isInvalid) {
                        validationData[validator.type.toLowerCase()].push({name: validatorName, message: message});
                    }
                });
                
                $controlGroup.data("original-classes", $controlGroup.data("original-clases") ? $controlGroup.data("original-classes") : $controlGroup.attr("class"));
                $input.data("original-aria-invalid", $input.data("original-aria-invalid") ? $input.data("original-aria-invalid") : $input.attr("aria-invalid"));
                $input.bind("validation.validation", function(event, validating) {
                    var errors = $input.triggerHandler("getValidators.validation");
                    return errors;
                });
                
                $input.bind("getValidators.validation", function() {
                    return validationData;
                });
                
                $input.bind("submit.validation", function() {
                    return $input.triggerHandler("change.validation", {submitting: true});
                });
                
                $input.bind(["keyup", "focus", "blur", "click", "keydown", "keypress", "change"].join(".validation ") + ".validation", function(event, validating) {
                    var errors = $input.triggerHandler("validationLostFocus.validation");
                    var eventType = event.type;
                    $controlGroup.removeClass("success");
                    $.each(errors, function(index, message) {
                        if (message.length > 0) {
                            $controlGroup.addClass("error");
                            if (settings.semanticallyStrict && eventType !== "blur") {
                                return false;
                            }
                            return false;
                        }
                    });
                });
                
                $input.bind("validationLostFocus.validation", function() {
                    $controlGroup.removeClass("success");
                });
            });
        }
    };
    
    var capitalizeFirstLetter = function(string) {
        return string.toLowerCase().replace(/(^[a-z])/g, function(letter) {
            return letter.toUpperCase();
        });
    };
    
    var n = function($input) {
        var value = $input.val();
        var type = $input.attr("type");
        if (type === "checkbox") {
            value = $input.is(":checked") ? value : "";
        } else if (type === "radio") {
            value = $('input[name="' + $input.attr("name") + '"]:checked').length > 0 ? value : "";
        }
        return value;
    };
    
    $.fn.jqBootstrapValidation = function(method) {
        return methods[method] ? methods[method].apply(this, Array.prototype.slice.call(arguments, 1)) : methods.init.apply(this, arguments);
    };
    
    $.jqBootstrapValidation = function(options) {
        $(":input").not("[type=image],[type=submit]").jqBootstrapValidation.apply(this, arguments);
    };
}(jQuery);